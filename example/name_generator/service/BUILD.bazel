load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@npm//@bazel/typescript:index.bzl", "ts_project")

PORT = 50051

ts_project(
    name = "index_ts",
    srcs = glob(
        ["**/*.ts"],
        exclude = ["**/*.test.ts"],
    ),
    declaration = True,
    tsconfig = "//:tsconfig.json",
    deps = [
        "//example/name_generator/proto/v1:example_name_generator_proto_v1_ts_proto_compile",
        "@npm//@grpc/grpc-js",
        "@npm//@types/faker",
        "@npm//@types/google-protobuf",
        "@npm//@types/yargs",
        "@npm//faker",
        "@npm//google-protobuf",
        "@npm//yargs",
    ],
)

nodejs_binary(
    name = "service",
    args = ["--bazel_patch_module_resolver"],
    data = [":index_ts"],
    entry_point = ":index.ts",
    templated_args = ["--port={}".format(PORT)],
)

sh_binary(
    name = "grpcwebproxy",
    srcs = ["@grpcwebproxy//:dist/grpcwebproxy-v0.14.1-linux-x86_64"],
    args = [
        "--allow_all_origins",
        "--backend_addr=127.0.0.1:{}".format(PORT),
        "--backend_tls_noverify",
        "--run_http_server=false",
        "--server_http_max_write_timeout=24h",
        "--server_tls_cert_file=./certs/example-com.crt",
        "--server_tls_key_file=./certs/example-com.key",
    ],
    data = [
        "//certs:example_com_tls",
        "@grpcwebproxy//:dist/grpcwebproxy-v0.14.1-linux-x86_64",
    ],
)
