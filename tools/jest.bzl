"jest"

load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//jest-cli:index.bzl", "jest", _jest_test = "jest_test")

def jest_test(name, srcs, data = [], jest_config = "//:jest.config.js", **kwargs):
    """a macro around the autogenerated jest_test rule

    Args:
        name: passed through to jest-cli rule
        data: snapshot files
        jest_config: defaults to //:jest.config.js
        srcs: spec/test files
        **kwargs: variadic keyword arguments
    """

    all_data = [jest_config] + srcs + data

    templated_args = [
        "--ci",
        "--colors",
        "--no-cache",
        "--no-watchman",
    ]

    templated_args.extend(["--config", "$(rootpath %s)" % jest_config])

    for src in srcs:
        templated_args.extend(["--runTestsByPath", "$(rootpaths %s)" % src])

    _jest_test(
        name = name,
        data = all_data,
        templated_args = templated_args,
        **kwargs
    )

    # Make sure the update command runs with a working directory in the workspace
    # so that any created snapshot files are in the sources, not in the runfiles
    write_file(
        name = "chdir",
        out = "chdir.js",
        content = [
            # cd /path/to/workspace
            "process.chdir(process.env['BUILD_WORKSPACE_DIRECTORY'])",
            # cd subdir/package
            "process.chdir('%s')" % native.package_name() if native.package_name() else "",
        ],
    )

    jest(
        name = name + ".update",
        data = all_data + ["chdir.js"],
        templated_args = templated_args + [
            "--updateSnapshot",
            "--runInBand",
            "--node_options=--require=$(rootpath chdir.js)",
        ],
    )
